<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shjlone&#39;s Blog</title>
  
  <subtitle>Hello World</subtitle>
  <link href="http://shjlone.github.io/atom.xml" rel="self"/>
  
  <link href="http://shjlone.github.io/"/>
  <updated>2021-05-29T05:43:49.960Z</updated>
  <id>http://shjlone.github.io/</id>
  
  <author>
    <name>shjlone</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《Kotlin实战》读书笔记</title>
    <link href="http://shjlone.github.io/wiki/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2019-03-22-%E3%80%8AKotlin%E5%AE%9E%E6%88%98%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://shjlone.github.io/wiki/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2019-03-22-%E3%80%8AKotlin%E5%AE%9E%E6%88%98%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2021-05-29T05:43:49.959Z</published>
    <updated>2021-05-29T05:43:49.960Z</updated>
    
    <content type="html"><![CDATA[<h5 id="基本规则"><a href="#基本规则" class="headerlink" title="基本规则"></a>基本规则</h5><ul><li>不需要分号</li></ul><h5 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h5><ul><li>fun声明函数</li><li>函数可以定义在文件的最外层</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">max</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">if</span>(a&gt;b) a <span class="keyword">else</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>表达式函数体</strong></p><pre><code>fun max(a: Int, b: Int): Int = if(a&gt;b) a else b</code></pre><p>表达式函数体可以省略返回类型，Kotlin会进行类型推导</p><pre><code>fun max(a: Int, b: Int)= if(a&gt;b) a else b</code></pre><p>数组就是类</p><h5 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h5><ul><li>var表示可写属性</li><li>val表示只读属性</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> answer = <span class="number">42</span> <span class="comment">//这个变量永不为null</span></span><br><span class="line"><span class="keyword">var</span> answer1:<span class="built_in">Int</span>? = <span class="number">40</span> <span class="comment">// 这个变量可以为null</span></span><br><span class="line"><span class="keyword">val</span> answer:<span class="built_in">Int</span> = <span class="number">42</span></span><br><span class="line"><span class="keyword">val</span>表示不可变引用，使用<span class="keyword">val</span>声明的变量不能在初始化之后再次赋值。</span><br><span class="line"><span class="keyword">var</span>可变引用，可以改变值，但不能改变类型。</span><br><span class="line"><span class="keyword">var</span> answer = <span class="number">13</span></span><br><span class="line">answer = <span class="string">&quot;no &quot;</span> 这样是错误的</span><br></pre></td></tr></table></figure><p><strong>字符串模板</strong></p><pre><code>$name$&#123;name&#125;</code></pre><p><strong>类</strong></p><pre><code>class Person(val name:String)class Person(val name:String, var isMarried:Boolean)</code></pre><p><strong>自定义访问器</strong></p><pre><code>class Rectangle(val height:Int, val width:Int) &#123;    val isSquare:Boolean        get() &#123;            return height == width        &#125;    //或者    get() = height == width&#125;</code></pre><p>包层级结构不需要遵守目录层级结构</p><p><strong>枚举</strong></p><pre><code>enum class Color(val r:Int, val g:Int, val b:Int) &#123;RED(255,0,0),GREEN(0,255,0);fun rgb() = (r*256 + g)*256 + b&#125;println(Color.GREEN.rgb())fun getMnumonic(color: Color) =     when(color) &#123;        Color.RED -&gt; &quot;Richard&quot;        Color.GREEN -&gt; &quot;Gave&quot;    &#125;</code></pre><p>@JvmOverloads， 会生成Java重载函数</p><p>顶层属性和函数</p><p>扩展函数不能被重写</p><h4 id="扩展属性"><a href="#扩展属性" class="headerlink" title="扩展属性"></a>扩展属性</h4><p>vararg 修饰符  可变参数</p><h4 id="中缀调用"><a href="#中缀调用" class="headerlink" title="中缀调用"></a>中缀调用</h4><p>局部函数</p><p>kotlin类声明默认是final和public，要想声明不是final的，将其标记为open</p><p>open、final、abstract</p><p>lateinit</p><p><strong>object</strong></p><p>定义一个类并同事创建一个实例，使用场景：</p><ul><li>对象声明是定义单例的一种方式</li><li>伴生对象可以持有工厂方法和其他与整个类相关，但在调用时并不依赖类实例的方法。</li><li>对象表达式用来替代Java的匿名内部类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">object DataProviderManager &#123;</span><br><span class="line">    <span class="function">fun <span class="title">registarDataProvider</span><span class="params">(provider: DataProvider)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DataProviderManager.registarDataProvider(...)</span><br></pre></td></tr></table></figure><p><strong>伴生对象companion</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClaa</span> </span>&#123;</span><br><span class="line">    companion object Factory&#123;</span><br><span class="line">        <span class="function">fun <span class="title">create</span><span class="params">()</span>:MyClass </span>= MyClass()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//该伴生对象的成员可通过只使用类名作为限定符来调用</span></span><br><span class="line">val instance = MyClass.create()</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以省略伴生对象的名称，在这种情况下将使用名称 Companion</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    companion object &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">val x = MyClass.Companion</span><br></pre></td></tr></table></figure><p>在 JVM 平台，如果使用 @JvmStatic 注解，你可以将伴生对象的成员生成为真正的静态方法和字段</p><p>直接通过容器类名来访问整个对象的方法和属性的能力</p><p>匿名对象可以实现多个接口或者不实现接口</p><p>lamdba表达式始终用花括号包围</p><pre><code>val sum = &#123;x: Int, y: Int -&gt; x+y&#125;println(sum(1,2))</code></pre><p>允许lamdba内部访问非final变量甚至修改它们</p><p>成员引用</p><pre><code>val getAge = Person::age</code></pre><p>all any  count  find  对集合应用判断式</p><p>with函数<br>apply</p><p>类型系统</p><p>可空性</p><pre><code>fun strLen(s:String) = s.lengthfun strLen(s:String?) = s.length</code></pre><p>安全调用运算符 ?.，只要链式中一个值为null，则整个表达式都返回null</p><pre><code>s?.toUpperCase()val testStr : String? = nullval result = testStr?.length?.plus(5)?.minus(10)println(result)</code></pre><p>?:</p><p>当一个函数有返回值时，如果方法中的代码使用?.去返回一个值，那么方法的返回值的类型后面也要加上?符号</p><pre><code>fun funNullMethod() : Int? &#123;    val str : String? = &quot;123456&quot;    return str?.length&#125;</code></pre><p>as?</p><p>非空断言  “!!”    显示地抛出异常</p><h5 id="let函数"><a href="#let函数" class="headerlink" title="let函数"></a>let函数</h5><p>作用：使用符号?.验证的时候忽略掉null</p><p>用法：变量?.let{…}</p><pre><code>val arrTest : Array&lt;Int?&gt; = arrayOf(1,2,null,3,null,5,6,null)// 传统写法for (index in arrTest) &#123;    if (index == null)&#123;        continue    &#125;    println(&quot;index =&gt; $index&quot;)&#125;// let写法for (index in arrTest) &#123;    index?.let &#123; println(&quot;index =&gt; $it&quot;) &#125;&#125;</code></pre><h5 id="Evils操作符"><a href="#Evils操作符" class="headerlink" title="Evils操作符"></a>Evils操作符</h5><p><strong>?:</strong></p><p>判断一个可空类型时，会返回一个我们自己设定好的默认值</p><pre><code>val testStr : String? = nullvar length = 0// ?: 写法length = testStr?.length ?: -1println(length)</code></pre><p><strong>!!</strong></p><p>判断一个可空类型时，会显示的抛出空引用异常</p><pre><code>val testStr : String? = nullprintln(testStr!!.length)</code></pre><p><strong>as?</strong></p><p>安全的类型转换</p><pre><code>val num2 : Int? = &quot;Koltin&quot; as? Intprintln(&quot;nun2 = $num2)</code></pre><p>基本类型、包装类型的转换需要通过API</p><p>Any  kotlin基类<br>Unit  kotlin中的void<br>Nothing    这个函数永不返回</p><p>List    listOf    mutableListOf、arrayListOf<br>Set    setOf    mutableSetOf、hashSetOf、linkedSetOf、sortedSetOf<br>Map    mapOf    mutableMapOf、hashMapOf、linkedMapOf、sortedMapOf</p><p>重载二元算术运算<br>operator</p><p>委托属性  by lazy()</p><p>kotlin允许使用对应名称的函数来重载一些标准的数学运算，但不能定义自己的运算符。</p><p>函数类型</p><p>内联函数</p><p>注解<br>@JvmName<br>@JvmStatic<br>@JvmOverloads<br>@JvmField</p><p>注解类：用来定义关联到声明和表达式的元数据的结构，它们不能包含任何代码</p><p>元注解<br>@Retention    说明你声明的注解是否会存储到.class文件，以及在运行时是否可以通过反射来访问它。</p><p>kotlin反射API</p><p>invoke</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;基本规则&quot;&gt;&lt;a href=&quot;#基本规则&quot; class=&quot;headerlink&quot; title=&quot;基本规则&quot;&gt;&lt;/a&gt;基本规则&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;不需要分号&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;header</summary>
      
    
    
    
    <category term="读书笔记" scheme="http://shjlone.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="读书笔记" scheme="http://shjlone.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>《深入理解计算机》读书笔记9：虚拟内存</title>
    <link href="http://shjlone.github.io/wiki/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/2021-04-13-%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B09-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/"/>
    <id>http://shjlone.github.io/wiki/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/2021-04-13-%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B09-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/</id>
    <published>2021-05-29T05:42:40.154Z</published>
    <updated>2021-05-29T05:53:57.015Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2021/04/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B01-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8.html">计算机系统漫游</a></li><li><a href="/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2021/04/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B02-%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86.html">信息的表示和处理</a></li><li><a href="">程序的机器级表示</a></li><li><a href="">处理器体系结构</a></li><li><a href="">优化程序性能</a></li><li><a href="">存储器层次结构</a></li><li><a href="">链接</a></li><li><a href="">异常流控制</a></li><li><a href="">虚拟内存</a></li><li><a href="">系统级I/O</a></li><li><a href="">网络编程</a></li><li><a href="">并发编程</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2021/04/13/%E6%B7</summary>
      
    
    
    
    <category term="读书笔记" scheme="http://shjlone.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    <category term="深入理解计算机" scheme="http://shjlone.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="深入理解计算机" scheme="http://shjlone.github.io/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>火车票黄牛</title>
    <link href="http://shjlone.github.io/wiki/%E9%9A%8F%E7%AC%94/2019-10--07-%E7%81%AB%E8%BD%A6%E7%A5%A8%E9%BB%84%E7%89%9B/"/>
    <id>http://shjlone.github.io/wiki/%E9%9A%8F%E7%AC%94/2019-10--07-%E7%81%AB%E8%BD%A6%E7%A5%A8%E9%BB%84%E7%89%9B/</id>
    <published>2021-05-29T05:42:40.154Z</published>
    <updated>2021-05-29T05:53:56.982Z</updated>
    
    <content type="html"><![CDATA[<p>今天“长见识”了。</p><p>开始以为回广州的高铁票应该很容易买到，所以，并没有提前买票。然而，在家用某行火车票刷票到7点也没买到票。明天可还要上班呢。想着要不去人工售票处碰碰运气。然后来到了高铁站。先去了人工售票窗口，售票的这个小姐姐用非常冷淡的表情回答说没有，然后我就再次问了一次，请问今晚往广州方向的车的票有没有，只要能上车的都行？结果是她再次肯定的说了一句没有！哎，既然这样说了…</p><p>然后，我想去售票机上碰碰运气。当我到了一台售票机前，打算查询的时候，旁边来了一位小哥，跟我说：兄Dai，需要票吗？一个小时以内的都可以搞定。我当时就有点懵逼了，黄牛难道可以变出票来？想着还是要回去的，于是说：我需要的。他说：你跟我来这边吧，这边的机器快一些。然后我们来到了旁边的一台机器旁，只见他迅速的在售票机前点击。操作也就是查询是否有余票，然后一下子就出现了，请刷身份证的提示。然后跟我说：快把身份证放上来。我一下子看傻了，然后迅速冷静下来，问他需要给他多少钱。结果，等了十几秒吧，票就没了。他表现的有点懊恼。想想还是要回去的，于是跟他谈价钱，然后又看他操作了一遍，太神奇了。不到一分钟，他又刷出来一张，然后我拿出身份证支付了。</p><p>事后想想，难道这是售票机的漏洞吗？难道售票机上的查询接口跟人工售票厅里的不一样？黄牛的这个钱也太好赚了吧。</p><p>再想想，可能是后台针对售票机在开车前一段时间特意留了一些票吧！这样能让真正赶火车的人能买到票。真是一片良苦用心啊！可惜哪里有利益哪里就有黄牛啊！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天“长见识”了。&lt;/p&gt;
&lt;p&gt;开始以为回广州的高铁票应该很容易买到，所以，并没有提前买票。然而，在家用某行火车票刷票到7点也没买到票。明天可还要上班呢。想着要不去人工售票处碰碰运气。然后来到了高铁站。先去了人工售票窗口，售票的这个小姐姐用非常冷淡的表情回答说没有，然后我</summary>
      
    
    
    
    <category term="随笔" scheme="http://shjlone.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>《大明王朝1566》经典语录</title>
    <link href="http://shjlone.github.io/wiki/%E9%9A%8F%E7%AC%94/2020-04-10-%E3%80%8A%E5%A4%A7%E6%98%8E%E7%8E%8B%E6%9C%9D1566%E3%80%8B%E7%BB%8F%E5%85%B8%E8%AF%AD%E5%BD%95/"/>
    <id>http://shjlone.github.io/wiki/%E9%9A%8F%E7%AC%94/2020-04-10-%E3%80%8A%E5%A4%A7%E6%98%8E%E7%8E%8B%E6%9C%9D1566%E3%80%8B%E7%BB%8F%E5%85%B8%E8%AF%AD%E5%BD%95/</id>
    <published>2021-05-29T05:42:40.154Z</published>
    <updated>2021-05-29T05:53:56.955Z</updated>
    
    <content type="html"><![CDATA[<ul><li>朝野都知道，我是严阁老提携的人。千秋万代以后，史书上我胡宗宪还会是严阁老的人。可你谭纶，还有朝里那些清流为什么还会看重我？就是我胡某在大事上从来上不误国，下不误民。</li><li>孔子说的“知不可为而为之”是什么本意！孔子是告诉世人，做事时不问可不可能，但问应不应该！</li><li>你中有我，我中有你，天下事坏就坏在这里。</li><li>事未经历不知难。</li><li>官场之中无朋友。</li><li>凡事都当作两面想。</li><li>你是个刚正的人，敢说话，敢抗上。可真要抗上，你这个七品能抗得过谁？在浙江你能做些事情撼动朝廷，那是因为你背后有人要撼动朝廷。到了江西分宜，凭你一个人又能震动谁？皇上要用的人谁也推不倒，皇上不用的人谁也保不了。</li><li>两句话你要记住，一句是文官们说的‘做官要三思’，什么叫三思，三思就是思危、思退、思变。知道了危险就能躲开危险，这就叫思危；躲到人家都不注意到你的地方，这就叫思退；退了下来就有了机会，再慢慢看、慢慢想，自己以前哪儿错了，往后该怎么做，这就叫思变。我再教你武官们说的那一句‘置之死地而后生’，看我大明朝的气数，这皇位迟早有一天是裕王的，到了那一天你才真是个死呢。 </li><li>文官的衣服上绣的是禽，武官的衣服上绣的是兽。披上了这身皮，我们哪一个不是衣冠禽兽。 </li><li>任何人答应你的事都不算数，只有自己能做主的才算数。 </li><li>这个世上，真靠得住的就两种人，一种是笨人，一种是直人。笨人没有心眼，直人不使心眼。 </li><li>世间万事万物都只有一个理，各人站的位置不同，看法不同而已。</li><li>历来造反的都是种田的人，没听说商人能闹翻了天。</li><li>裕王: 大明朝谁是贤臣? 嘉靖: 没有谁是真正的贤臣,贤时用之,不贤黜之。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;朝野都知道，我是严阁老提携的人。千秋万代以后，史书上我胡宗宪还会是严阁老的人。可你谭纶，还有朝里那些清流为什么还会看重我？就是我胡某在大事上从来上不误国，下不误民。&lt;/li&gt;
&lt;li&gt;孔子说的“知不可为而为之”是什么本意！孔子是告诉世人，做事时不问可不可能，但问</summary>
      
    
    
    
    <category term="随笔" scheme="http://shjlone.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>对于服务端开发的理解</title>
    <link href="http://shjlone.github.io/wiki/%E9%9A%8F%E7%AC%94/2021-02-01-%E5%AF%B9%E4%BA%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%BC%80%E5%8F%91%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://shjlone.github.io/wiki/%E9%9A%8F%E7%AC%94/2021-02-01-%E5%AF%B9%E4%BA%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%BC%80%E5%8F%91%E7%9A%84%E7%90%86%E8%A7%A3/</id>
    <published>2021-05-29T05:42:40.154Z</published>
    <updated>2021-05-29T05:53:57.002Z</updated>
    
    <content type="html"><![CDATA[<p>最近一段时间，开始了解并完成了一些后端需求。大致的过程如下：</p><ul><li>熟悉PHP，看了《PHP核心技术与最佳实践》、《PHP内核剖析》、《深入理解PHP内核》；</li><li>熟悉MySQL，看了《MySQL必知必会》，接下来会看《高性能MySQL》；</li><li>熟悉Redis，看了《Redis实战》；</li><li>阅读Symfony官网文档，了解其基本原理；</li><li>由于本地使用docker开发环境，所以对docker相关知识点也进行了一轮复习；</li></ul><p>整体来看，想使用PHP相关技术栈进行后端开发，经过上面的学习后，写写业务代码，一点问题都没有。公司使用PHP这一套技术栈，也是基于人力成本、开发效率各方面<br>因素综合考虑而定的。在现有体量下也确实是比较好的选择。因为自己本身有其他语言的底子在，学习的过程中还是蛮顺利的。现在回过头看看，后端的整体架构设计也是<br>根据体量的大小一步步进化来的。</p><p>当一个（小）项目刚开始时，使用Nginx+Symfony+MySQL，当业务量有所增长，这个时候需要加上缓存Redis；当业务继续增长，这个时候需要多台机器部署了，需要<br>使用负载均衡，Nginx进行反向代理，将流量分发到不同的机器；当业务继续增长，这个时候需要考虑部署多个数据库，进行主从同步；当业务继续增长，这个时候Redis也要<br>考虑使用集群。随着业务继续增长，数据库表的设计，如何分表。如何分库，业务代码如何写效率高，等等问题都要进行考虑了。当业务还在继续增长，可能有些事情用PHP来干<br>已经不是最优解了！</p><p>除了上面所说的一些技术选择外，为了保证服务器的稳定，还有很多事情要做的，比如要对服务器相关数据进行监控，比如请求数、慢请求数、服务器流量消耗情况等；要有<br>一套完善的日志系统；对数据库的监控；容灾机制等等。</p><p>这些知识的获取途径无外乎两种，一是业务增长喜人，给了你机会把这些坑都踩一遍；二是在大公司，现成的解决方案供你学习。所以，刚毕业的小菜鸟们，还是建议能去<br>大公司就尽量去大公司，做大做强的小公司太少了，不一定能被你撞上。</p><p><strong>服务端需要用到的技术或软件：</strong></p><ul><li>开发框架：Symfony、ThinkPHP等</li><li>消息队列：RabbitMQ等  </li><li>服务器：Nginx、Apache等</li><li>缓存：Redis、MemCached等</li><li>数据存储：MySQL、PostgreSQL等</li><li>代码部署：Walle等</li><li>数据监控：Zabbix等</li><li>日志分析系统：elk等</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近一段时间，开始了解并完成了一些后端需求。大致的过程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;熟悉PHP，看了《PHP核心技术与最佳实践》、《PHP内核剖析》、《深入理解PHP内核》；&lt;/li&gt;
&lt;li&gt;熟悉MySQL，看了《MySQL必知必会》，接下来会看《高性能MySQL》；</summary>
      
    
    
    
    <category term="随笔" scheme="http://shjlone.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>《深入理解计算机》读书笔记3：处理器体系结构</title>
    <link href="http://shjlone.github.io/wiki/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/2021-04-13-%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B04-%E5%A4%84%E7%90%86%E5%99%A8%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    <id>http://shjlone.github.io/wiki/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/2021-04-13-%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B04-%E5%A4%84%E7%90%86%E5%99%A8%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</id>
    <published>2021-05-29T05:42:40.153Z</published>
    <updated>2021-05-29T05:47:04.512Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2021/04/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B01-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8.html">计算机系统漫游</a></li><li><a href="/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2021/04/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B02-%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86.html">信息的表示和处理</a></li><li><a href="">程序的机器级表示</a></li><li><a href="">处理器体系结构</a></li><li><a href="">优化程序性能</a></li><li><a href="">存储器层次结构</a></li><li><a href="">链接</a></li><li><a href="">异常流控制</a></li><li><a href="">虚拟内存</a></li><li><a href="">系统级I/O</a></li><li><a href="">网络编程</a></li><li><a href="">并发编程</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2021/04/13/%E6%B7</summary>
      
    
    
    
    <category term="读书笔记" scheme="http://shjlone.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    <category term="深入理解计算机" scheme="http://shjlone.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="深入理解计算机" scheme="http://shjlone.github.io/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>《深入理解计算机》读书笔记5：优化程序性能</title>
    <link href="http://shjlone.github.io/wiki/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/2021-04-13-%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B05-%E4%BC%98%E5%8C%96%E7%A8%8B%E5%BA%8F%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/"/>
    <id>http://shjlone.github.io/wiki/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/2021-04-13-%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B05-%E4%BC%98%E5%8C%96%E7%A8%8B%E5%BA%8F%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/</id>
    <published>2021-05-29T05:42:40.153Z</published>
    <updated>2021-05-29T05:53:57.011Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2021/04/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B01-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8.html">计算机系统漫游</a></li><li><a href="/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2021/04/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B02-%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86.html">信息的表示和处理</a></li><li><a href="">程序的机器级表示</a></li><li><a href="">处理器体系结构</a></li><li><a href="">优化程序性能</a></li><li><a href="">存储器层次结构</a></li><li><a href="">链接</a></li><li><a href="">异常流控制</a></li><li><a href="">虚拟内存</a></li><li><a href="">系统级I/O</a></li><li><a href="">网络编程</a></li><li><a href="">并发编程</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2021/04/13/%E6%B7</summary>
      
    
    
    
    <category term="读书笔记" scheme="http://shjlone.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    <category term="深入理解计算机" scheme="http://shjlone.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="深入理解计算机" scheme="http://shjlone.github.io/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>《深入理解计算机》读书笔记6：存储器层次结构</title>
    <link href="http://shjlone.github.io/wiki/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/2021-04-13-%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B06-%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/"/>
    <id>http://shjlone.github.io/wiki/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/2021-04-13-%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B06-%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/</id>
    <published>2021-05-29T05:42:40.153Z</published>
    <updated>2021-05-29T05:53:57.018Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2021/04/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B01-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8.html">计算机系统漫游</a></li><li><a href="/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2021/04/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B02-%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86.html">信息的表示和处理</a></li><li><a href="">程序的机器级表示</a></li><li><a href="">处理器体系结构</a></li><li><a href="">优化程序性能</a></li><li><a href="">存储器层次结构</a></li><li><a href="">链接</a></li><li><a href="">异常流控制</a></li><li><a href="">虚拟内存</a></li><li><a href="">系统级I/O</a></li><li><a href="">网络编程</a></li><li><a href="">并发编程</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2021/04/13/%E6%B7</summary>
      
    
    
    
    <category term="读书笔记" scheme="http://shjlone.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    <category term="深入理解计算机" scheme="http://shjlone.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="深入理解计算机" scheme="http://shjlone.github.io/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>《深入理解计算机》读书笔记7：链接</title>
    <link href="http://shjlone.github.io/wiki/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/2021-04-13-%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B07-%E9%93%BE%E6%8E%A5/"/>
    <id>http://shjlone.github.io/wiki/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/2021-04-13-%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B07-%E9%93%BE%E6%8E%A5/</id>
    <published>2021-05-29T05:42:40.153Z</published>
    <updated>2021-05-29T05:53:56.943Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2021/04/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B01-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8.html">计算机系统漫游</a></li><li><a href="/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2021/04/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B02-%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86.html">信息的表示和处理</a></li><li><a href="">程序的机器级表示</a></li><li><a href="">处理器体系结构</a></li><li><a href="">优化程序性能</a></li><li><a href="">存储器层次结构</a></li><li><a href="">链接</a></li><li><a href="">异常流控制</a></li><li><a href="">虚拟内存</a></li><li><a href="">系统级I/O</a></li><li><a href="">网络编程</a></li><li><a href="">并发编程</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2021/04/13/%E6%B7</summary>
      
    
    
    
    <category term="读书笔记" scheme="http://shjlone.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    <category term="深入理解计算机" scheme="http://shjlone.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="深入理解计算机" scheme="http://shjlone.github.io/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>《深入理解计算机》读书笔记8：异常流控制</title>
    <link href="http://shjlone.github.io/wiki/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/2021-04-13-%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B08-%E5%BC%82%E5%B8%B8%E6%B5%81%E6%8E%A7%E5%88%B6/"/>
    <id>http://shjlone.github.io/wiki/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/2021-04-13-%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B08-%E5%BC%82%E5%B8%B8%E6%B5%81%E6%8E%A7%E5%88%B6/</id>
    <published>2021-05-29T05:42:40.153Z</published>
    <updated>2021-05-29T05:53:56.968Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2021/04/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B01-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8.html">计算机系统漫游</a></li><li><a href="/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2021/04/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B02-%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86.html">信息的表示和处理</a></li><li><a href="">程序的机器级表示</a></li><li><a href="">处理器体系结构</a></li><li><a href="">优化程序性能</a></li><li><a href="">存储器层次结构</a></li><li><a href="">链接</a></li><li><a href="">异常流控制</a></li><li><a href="">虚拟内存</a></li><li><a href="">系统级I/O</a></li><li><a href="">网络编程</a></li><li><a href="">并发编程</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2021/04/13/%E6%B7</summary>
      
    
    
    
    <category term="读书笔记" scheme="http://shjlone.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    <category term="深入理解计算机" scheme="http://shjlone.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="深入理解计算机" scheme="http://shjlone.github.io/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>《深入理解计算机》读书笔记12：并发编程</title>
    <link href="http://shjlone.github.io/wiki/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/2021-04-13-%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B012-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    <id>http://shjlone.github.io/wiki/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/2021-04-13-%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B012-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</id>
    <published>2021-05-29T05:42:40.152Z</published>
    <updated>2021-05-29T05:53:56.958Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2021/04/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B01-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8.html">计算机系统漫游</a></li><li><a href="/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2021/04/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B02-%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86.html">信息的表示和处理</a></li><li><a href="">程序的机器级表示</a></li><li><a href="">处理器体系结构</a></li><li><a href="">优化程序性能</a></li><li><a href="">存储器层次结构</a></li><li><a href="">链接</a></li><li><a href="">异常流控制</a></li><li><a href="">虚拟内存</a></li><li><a href="">系统级I/O</a></li><li><a href="">网络编程</a></li><li><a href="">并发编程</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2021/04/13/%E6%B7</summary>
      
    
    
    
    <category term="读书笔记" scheme="http://shjlone.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    <category term="深入理解计算机" scheme="http://shjlone.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="深入理解计算机" scheme="http://shjlone.github.io/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>《深入理解计算机》读书笔记11：网络编程</title>
    <link href="http://shjlone.github.io/wiki/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/2021-04-13-%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B011-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>http://shjlone.github.io/wiki/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/2021-04-13-%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B011-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</id>
    <published>2021-05-29T05:42:40.152Z</published>
    <updated>2021-05-29T05:53:56.966Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2021/04/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B01-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8.html">计算机系统漫游</a></li><li><a href="/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2021/04/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B02-%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86.html">信息的表示和处理</a></li><li><a href="">程序的机器级表示</a></li><li><a href="">处理器体系结构</a></li><li><a href="">优化程序性能</a></li><li><a href="">存储器层次结构</a></li><li><a href="">链接</a></li><li><a href="">异常流控制</a></li><li><a href="">虚拟内存</a></li><li><a href="">系统级I/O</a></li><li><a href="">网络编程</a></li><li><a href="">并发编程</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2021/04/13/%E6%B7</summary>
      
    
    
    
    <category term="读书笔记" scheme="http://shjlone.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    <category term="深入理解计算机" scheme="http://shjlone.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="深入理解计算机" scheme="http://shjlone.github.io/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>《深入理解计算机》读书笔记2：信息的表示和处理</title>
    <link href="http://shjlone.github.io/wiki/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/2021-04-13-%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B02-%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86/"/>
    <id>http://shjlone.github.io/wiki/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/2021-04-13-%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B02-%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86/</id>
    <published>2021-05-29T05:42:40.152Z</published>
    <updated>2021-05-29T05:46:11.289Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2021/04/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B01-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8.html">计算机系统漫游</a></li><li><a href="/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2021/04/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B02-%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86.html">信息的表示和处理</a></li><li><a href="">程序的机器级表示</a></li><li><a href="">处理器体系结构</a></li><li><a href="">优化程序性能</a></li><li><a href="">存储器层次结构</a></li><li><a href="">链接</a></li><li><a href="">异常流控制</a></li><li><a href="">虚拟内存</a></li><li><a href="">系统级I/O</a></li><li><a href="">网络编程</a></li><li><a href="">并发编程</a></li></ul><p>原码、反码、补码</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2021/04/13/%E6%B7</summary>
      
    
    
    
    <category term="读书笔记" scheme="http://shjlone.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    <category term="深入理解计算机" scheme="http://shjlone.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="深入理解计算机" scheme="http://shjlone.github.io/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>《深入理解计算机》读书笔记3：程序的机器级表示</title>
    <link href="http://shjlone.github.io/wiki/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/2021-04-13-%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B03-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/"/>
    <id>http://shjlone.github.io/wiki/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/2021-04-13-%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B03-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/</id>
    <published>2021-05-29T05:42:40.152Z</published>
    <updated>2021-05-29T05:47:04.515Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2021/04/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B01-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8.html">计算机系统漫游</a></li><li><a href="/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2021/04/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B02-%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86.html">信息的表示和处理</a></li><li><a href="">程序的机器级表示</a></li><li><a href="">处理器体系结构</a></li><li><a href="">优化程序性能</a></li><li><a href="">存储器层次结构</a></li><li><a href="">链接</a></li><li><a href="">异常流控制</a></li><li><a href="">虚拟内存</a></li><li><a href="">系统级I/O</a></li><li><a href="">网络编程</a></li><li><a href="">并发编程</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2021/04/13/%E6%B7</summary>
      
    
    
    
    <category term="读书笔记" scheme="http://shjlone.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    <category term="深入理解计算机" scheme="http://shjlone.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="深入理解计算机" scheme="http://shjlone.github.io/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>《深入理解计算机》读书笔记1：计算机系统漫游</title>
    <link href="http://shjlone.github.io/wiki/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/2021-04-13-%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B01-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/"/>
    <id>http://shjlone.github.io/wiki/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/2021-04-13-%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B01-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/</id>
    <published>2021-05-29T05:42:40.151Z</published>
    <updated>2021-05-29T05:45:30.973Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2021/04/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B01-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8.html">计算机系统漫游</a></li><li><a href="">信息的表示和处理</a></li><li><a href="">程序的机器级表示</a> </li><li><a href="">处理器体系结构</a></li><li><a href="">优化程序性能</a></li><li><a href="">存储器层次结构</a></li><li><a href="">链接</a></li><li><a href="">异常流控制</a></li><li><a href="">虚拟内存</a></li><li><a href="">系统级I/O</a></li><li><a href="">网络编程</a></li><li><a href="">并发编程</a></li></ul><h2 id="计算机系统漫游"><a href="#计算机系统漫游" class="headerlink" title="计算机系统漫游"></a>计算机系统漫游</h2><p>本章只是对整个计算机体系进行概要的介绍，很多主题扩展开来又可以写一本很厚的书了。在阅读此章时，有个大概了解即可。</p><h3 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h3><p>源程序实际上就是一个由值0和1组成的位（又称为比特）序列，8个位被组织成一组，称为<strong>字节</strong>。每个字节表示程序中的某些文本字符。<br>系统中所有的信息–包括磁盘文件、内存中的程序、内存中存放用户数据以及网络上传送的数据，都是由一串比特表示的。区分不同数据对象的唯一方式是我们读到这些数据对象时的上下文。</p><p>下图描述了一个c程序是如何被编译运行的。</p><p><img src="/public/img/booknote/csapp_1_1.png"></p><h3 id="关于计算机的构成"><a href="#关于计算机的构成" class="headerlink" title="关于计算机的构成"></a>关于计算机的构成</h3><p><img src="/public/img/booknote/csapp_1_2.png"></p><h3 id="关于存储器"><a href="#关于存储器" class="headerlink" title="关于存储器"></a>关于存储器</h3><p><img src="/public/img/booknote/csapp_1_3.png"></p><p>分层，高层提供给低层高速缓存，越高层性能越好，价格越贵。</p><h3 id="计算机抽象的表示"><a href="#计算机抽象的表示" class="headerlink" title="计算机抽象的表示"></a>计算机抽象的表示</h3><p><img src="/public/img/booknote/csapp_1_4.png"></p><h3 id="关于shell"><a href="#关于shell" class="headerlink" title="关于shell"></a>关于shell</h3><p>shell是一个命令行解释器，它输出一个提示符，等待输入一个命令行，然后执行这个命令。如果该命令行的第一个单词不是内置的shell命令，那么shell就会假设这是一个可执行文件的名字，它将加载并运行这个文件。</p><h3 id="操作系统的两个基本功能："><a href="#操作系统的两个基本功能：" class="headerlink" title="操作系统的两个基本功能："></a>操作系统的两个基本功能：</h3><ol><li>防止硬件被失控的应用程序滥用；</li><li>向应用程序提成简单一致的机制来控制复杂而又通常大不相同的低级硬件设备。</li></ol><p>操作系统通过几个基本的抽象概念（进程、虚拟内存和文件）来实现这两个功能。<br>文件是对I/O设备的抽象表示，虚拟内存是对主存和磁盘I/O设备的抽象表示，进程则是对处理器、主存和I/O设备的抽象表示。</p><h3 id="Posix的由来"><a href="#Posix的由来" class="headerlink" title="Posix的由来"></a>Posix的由来</h3><p>20世纪80年代中期，Unix厂商试图通过加入新的、往往不兼容的特性来使他们的程序与众不同，为了阻止这种趋势，IEEE开始标准化Unix的开发，后来由Richard Stallman命名为“Posix”。结果就得到了一些列的标准，称作Posix标准。</p><h3 id="并发运行"><a href="#并发运行" class="headerlink" title="并发运行"></a>并发运行</h3><p>一个进程的指令和另一个进程的指令是交错执行的。</p><p>操作系统保持跟踪进程运行所需的所有状态信息。这种状态，也就是<strong>上下文</strong>。</p><p>进程间切换的交错执行的机制称为<strong>上下文切换</strong>。</p><p><img src="/public/img/booknote/csapp_1_5.png"></p><h3 id="Amdahl定律"><a href="#Amdahl定律" class="headerlink" title="Amdahl定律"></a>Amdahl定律</h3><p><img src="/public/img/booknote/csapp_1_6.png"></p><ul><li>a表示可以提升部分的比例</li><li>k表示可提升部分性能提升的比例</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2021/04/13/%E6%B7</summary>
      
    
    
    
    <category term="读书笔记" scheme="http://shjlone.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    <category term="深入理解计算机" scheme="http://shjlone.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="深入理解计算机" scheme="http://shjlone.github.io/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>《深入理解计算机》读书笔记10：系统级I/O</title>
    <link href="http://shjlone.github.io/wiki/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/2021-04-13-%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B010-%E7%B3%BB%E7%BB%9F%E7%BA%A7IO/"/>
    <id>http://shjlone.github.io/wiki/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/2021-04-13-%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B010-%E7%B3%BB%E7%BB%9F%E7%BA%A7IO/</id>
    <published>2021-05-29T05:42:40.151Z</published>
    <updated>2021-05-29T05:53:56.970Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2021/04/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B01-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8.html">计算机系统漫游</a></li><li><a href="/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2021/04/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B02-%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86.html">信息的表示和处理</a></li><li><a href="">程序的机器级表示</a></li><li><a href="">处理器体系结构</a></li><li><a href="">优化程序性能</a></li><li><a href="">存储器层次结构</a></li><li><a href="">链接</a></li><li><a href="">异常流控制</a></li><li><a href="">虚拟内存</a></li><li><a href="">系统级I/O</a></li><li><a href="">网络编程</a></li><li><a href="">并发编程</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2021/04/13/%E6%B7</summary>
      
    
    
    
    <category term="读书笔记" scheme="http://shjlone.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    <category term="深入理解计算机" scheme="http://shjlone.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="深入理解计算机" scheme="http://shjlone.github.io/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Connection reset by peer) while reading response header from upstream</title>
    <link href="http://shjlone.github.io/wiki/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/%E6%9C%8D%E5%8A%A1%E7%AB%AF/2021-02-02-Connection%20reset%20by%20peer/"/>
    <id>http://shjlone.github.io/wiki/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/%E6%9C%8D%E5%8A%A1%E7%AB%AF/2021-02-02-Connection%20reset%20by%20peer/</id>
    <published>2021-05-29T05:42:40.149Z</published>
    <updated>2021-05-29T05:50:32.491Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题：Connection-reset-by-peer-while-reading-response-header-from-upstream"><a href="#问题：Connection-reset-by-peer-while-reading-response-header-from-upstream" class="headerlink" title="问题：Connection reset by peer) while reading response header from upstream"></a>问题：Connection reset by peer) while reading response header from upstream</h3><h4 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h4><p>某些请求一直返回<strong>502 Bad Gateway</strong>的错误，查看服务端的error日志，显示Connection reset by peer。当时的场景是一个每隔一分钟的定时脚本<br>每次运行时，获取需要处理的数据，同步请求某个服务端接口进行文件上传。猜测是这个接口请求响应很慢，一分钟后又再次请求同样的接口而出现问题。</p><h4 id="处理："><a href="#处理：" class="headerlink" title="处理："></a>处理：</h4><p>修改接口对应的逻辑，让这个接口能快速响应；此问题消失。查阅资料，Nginx的响应有几个参数设置：</p><ul><li>keepalive_timeout：设置客户端的长连接超时时间，如果超过这个时间客户端没有发起请求，则Nginx服务器会主动关闭长连接。</li><li>keepalive_requests：设置与客户端的建立的一个长连接可以处理的最大请求次数，如果超过这个值，则Nginx会主动关闭该长连接。</li></ul><p>对于此类问题，也可以尝试将keepalive_timeout的时间设置的长一些。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;问题：Connection-reset-by-peer-while-reading-response-header-from-upstream&quot;&gt;&lt;a href=&quot;#问题：Connection-reset-by-peer-while-reading-respons</summary>
      
    
    
    
    <category term="技术开发" scheme="http://shjlone.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="服务端" scheme="http://shjlone.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    
    
    <category term="服务端" scheme="http://shjlone.github.io/tags/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ笔记</title>
    <link href="http://shjlone.github.io/wiki/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/%E6%9C%8D%E5%8A%A1%E7%AB%AF/2021-02-02-RabbitMQ%E7%AC%94%E8%AE%B0/"/>
    <id>http://shjlone.github.io/wiki/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/%E6%9C%8D%E5%8A%A1%E7%AB%AF/2021-02-02-RabbitMQ%E7%AC%94%E8%AE%B0/</id>
    <published>2021-05-29T05:42:40.149Z</published>
    <updated>2021-05-29T05:50:42.420Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h4 id="安装PHP扩展amqp"><a href="#安装PHP扩展amqp" class="headerlink" title="安装PHP扩展amqp"></a>安装PHP扩展amqp</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PHP &lt; 7.3</span><br><span class="line"></span><br><span class="line">#install some base extensions</span><br><span class="line">RUN apt-get install -y \</span><br><span class="line">        libzip-dev \</span><br><span class="line">        zip \</span><br><span class="line">  &amp;&amp; docker-php-ext-configure zip --with-libzip \</span><br><span class="line">  &amp;&amp; docker-php-ext-install zip</span><br><span class="line"></span><br><span class="line">PHP &gt;= 7.3</span><br><span class="line"></span><br><span class="line">#install some base extensions</span><br><span class="line">RUN apt-get install -y \</span><br><span class="line">libzip-dev \</span><br><span class="line">zip \</span><br><span class="line">&amp;&amp; docker-php-ext-install zip</span><br></pre></td></tr></table></figure><h4 id="安装RabbitMQ"><a href="#安装RabbitMQ" class="headerlink" title="安装RabbitMQ"></a>安装RabbitMQ</h4><p>docker安装，使用localhost:5672访问其后台</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq:</span><br><span class="line">        image:rabbitmq:management</span><br><span class="line">        restart: always</span><br><span class="line">        environment:</span><br><span class="line">            RABBITMQ_DEFAULT_USER: &quot;root&quot;</span><br><span class="line">            RABBITMQ_DEFAULT_PASS: &quot;root&quot;</span><br><span class="line">        volumes:</span><br><span class="line">            - ./code/rabbitmq/rabbitmq:/var/lib/rabbitmq</span><br><span class="line">            - ./code/rabbitmq/log:/log/rabbitmq/log</span><br><span class="line">        ports:</span><br><span class="line">            - 15672:15672</span><br><span class="line">            - 5672:5672</span><br></pre></td></tr></table></figure><h4 id="Symfony安装扩展"><a href="#Symfony安装扩展" class="headerlink" title="Symfony安装扩展"></a>Symfony安装扩展</h4><p><a href="https://github.com/php-amqplib/RabbitMqBundle">https://github.com/php-amqplib/RabbitMqBundle</a></p><ol><li>Symfony中的composer中添加</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;php-amqplib/rabbitmq-bundle&quot;: &quot;1.14.4&quot;</span><br></pre></td></tr></table></figure><ol start="2"><li>执行更新命令</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php composer update php-amqplib/rabbitmq-bundle</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://rabbitmq.com/">https://rabbitmq.com</a></li><li><a href="https://blog.csdn.net/whoamiyang/article/details/54954780">https://blog.csdn.net/whoamiyang/article/details/54954780</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;h4 id=&quot;安装PHP扩展amqp&quot;&gt;&lt;a href=&quot;#安装PHP扩展amqp&quot; class=&quot;headerlink&quot; title=&quot;安装P</summary>
      
    
    
    
    <category term="技术开发" scheme="http://shjlone.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="服务端" scheme="http://shjlone.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    
    
    <category term="服务端" scheme="http://shjlone.github.io/tags/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>MySQL知识点</title>
    <link href="http://shjlone.github.io/wiki/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/%E6%9C%8D%E5%8A%A1%E7%AB%AF/2021-03-30-MySQL%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://shjlone.github.io/wiki/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/%E6%9C%8D%E5%8A%A1%E7%AB%AF/2021-03-30-MySQL%E7%9F%A5%E8%AF%86%E7%82%B9/</id>
    <published>2021-05-29T05:42:40.149Z</published>
    <updated>2021-05-29T05:50:42.415Z</updated>
    
    <content type="html"><![CDATA[<h2 id="explain-使用"><a href="#explain-使用" class="headerlink" title="explain 使用"></a>explain 使用</h2><table><thead><tr><th>列名</th><th>说明</th></tr></thead><tbody><tr><td>id</td><td>执行编号，标识select所属的行。如果在语句中没子查询或关联查询，只有唯一的select，每行都将显示1。否则，内层的select语句一般会顺序编号，对应于其在原始语句中的位置</td></tr><tr><td>select_type</td><td>显示本行是简单或复杂select。如果查询有任何复杂的子查询，则最外层标记为PRIMARY（DERIVED、UNION、UNION RESUlT）</td></tr><tr><td>table</td><td>访问引用哪个表（引用某个查询，如“derived3”）</td></tr><tr><td>type</td><td>数据访问/读取操作类型（ALL、index、range、ref、eq_ref、const/system、NULL）</td></tr><tr><td>possible_keys</td><td>揭示哪一些索引可能有利于高效的查找</td></tr><tr><td>key</td><td>显示mysql决定采用哪个索引来优化查询</td></tr><tr><td>key_len</td><td>显示mysql在索引里使用的字节数</td></tr><tr><td>ref</td><td>显示了之前的表在key列记录的索引中查找值所用的列或常量</td></tr><tr><td>rows</td><td>为了找到所需的行而需要读取的行数，估算值，不精确。通过把所有rows列值相乘，可粗略估算整个查询会检查的行数</td></tr><tr><td>Extra</td><td>额外信息，如using index、filesort等</td></tr></tbody></table><p><strong>select_type</strong></p><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>simple</td><td>简单子查询，不包含子查询和union</td></tr><tr><td>primary</td><td>包含union或者子查询，最外层的部分标记为primary</td></tr><tr><td>subquery</td><td>一般子查询中的子查询被标记为subquery，也就是位于select列表中的查询</td></tr><tr><td>derived</td><td>派生表——该临时表是从子查询派生出来的，位于form中的子查询</td></tr><tr><td>union</td><td>位于union中第二个及其以后的子查询被标记为union，第一个就被标记为primary如果是union位于from中则标记为derived</td></tr><tr><td>union result</td><td>用来从匿名临时表里检索结果的select被标记为union result</td></tr><tr><td>dependent union</td><td>顾名思义，首先需要满足UNION的条件，及UNION中第二个以及后面的SELECT语句，同时该语句依赖外部的查询</td></tr><tr><td>subquery</td><td>子查询中第一个SELECT语句</td></tr><tr><td>dependent subquery</td><td>和DEPENDENT UNION相对UNION一样</td></tr></tbody></table><p><strong>type</strong></p><p>type显示的是访问类型，是较为重要的一个指标，结果值从好到坏依次是：<br>system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL ，<br>一般来说，得保证查询至少达到range级别，最好能达到ref。</p><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>All</td><td>最坏的情况,全表扫描</td></tr><tr><td>index</td><td>和全表扫描一样。只是扫描表的时候按照索引次序进行而不是行。主要优点就是避免了排序, 但是开销仍然非常大。如在Extra列看到Using index，说明正在使用覆盖索引，只扫描索引的数据，它比按索引次序全表扫描的开销要小很多</td></tr><tr><td>range</td><td>范围扫描，一个有限制的索引扫描。key 列显示使用了哪个索引。当使用=、 &lt;&gt;、&gt;、&gt;=、&lt;、&lt;=、IS NULL、&lt;=&gt;、BETWEEN 或者 IN 操作符,用常量比较关键字列时,可以使用 range</td></tr><tr><td>ref</td><td>一种索引访问，它返回所有匹配某个单个值的行。此类索引访问只有当使用非唯一性索引或唯一性索引非唯一性前缀时才会发生。这个类型跟eq_ref不同的是，它用在关联操作只使用了索引的最左前缀，或者索引不是UNIQUE和PRIMARY KEY。ref可以用于使用=或&lt;=&gt;操作符的带索引的列。</td></tr><tr><td>eq_ref</td><td>最多只返回一条符合条件的记录。使用唯一性索引或主键查找时会发生 （高效）</td></tr><tr><td>const</td><td>当确定最多只会有一行匹配的时候，MySQL优化器会在查询前读取它而且只读取一次，因此非常快。当主键放入where子句时，mysql把这个查询转为一个常量（高效）</td></tr><tr><td>system</td><td>这是const连接类型的一种特例，表仅有一行满足条件。</td></tr><tr><td>Null</td><td>意味说mysql能在优化阶段分解查询语句，在执行阶段甚至用不到访问表或索引（高效）</td></tr></tbody></table><p><strong>Extra</strong></p><p>Extra是EXPLAIN输出中另外一个很重要的列，该列显示MySQL在查询过程中的一些详细信息，MySQL查询优化器执行查询的过程中对查询计划的重要补充信息。</p><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>Using filesort</td><td>MySQL有两种方式可以生成有序的结果，通过排序操作或者使用索引，当Extra中出现了Using filesort 说明MySQL使用了后者，但注意虽然叫filesort但并不是说明就是用了文件来进行排序，只要可能排序都是在内存里完成的。大部分情况下利用索引排序更快，所以一般这时也要考虑优化查询了。使用文件完成排序操作，这是可能是ordery by，group by语句的结果，这可能是一个CPU密集型的过程，可以通过选择合适的索引来改进性能，用索引来为查询结果排序。</td></tr><tr><td>Using temporary</td><td>用临时表保存中间结果，常用于GROUP BY 和 ORDER BY操作中，一般看到它说明查询需要优化了，就算避免不了临时表的使用也要尽量避免硬盘临时表的使用。</td></tr><tr><td>Not exists</td><td>MYSQL优化了LEFT JOIN，一旦它找到了匹配LEFT JOIN标准的行， 就不再搜索了。</td></tr><tr><td>Using index</td><td>说明查询是覆盖了索引的，不需要读取数据文件，从索引树（索引文件）中即可获得信息。如果同时出现using where，表明索引被用来执行索引键值的查找，没有using where，表明索引用来读取数据而非执行查找动作。这是MySQL服务层完成的，但无需再回表查询记录。</td></tr><tr><td>Using index condition</td><td>这是MySQL 5.6出来的新特性，叫做“索引条件推送”。简单说一点就是MySQL原来在索引上是不能执行如like这样的操作的，但是现在可以了，这样减少了不必要的IO操作，但是只能用在二级索引上。</td></tr><tr><td>Using where</td><td>使用了WHERE从句来限制哪些行将与下一张表匹配或者是返回给用户。注意：Extra列出现Using where表示MySQL服务器将存储引擎返回服务层以后再应用WHERE条件过滤。</td></tr><tr><td>Using join buffer</td><td>使用了连接缓存：Block Nested Loop，连接算法是块嵌套循环连接;Batched Key Access，连接算法是批量索引连接</td></tr><tr><td>impossible where</td><td>where子句的值总是false，不能用来获取任何元组</td></tr><tr><td>select tables optimized away</td><td>在没有GROUP BY子句的情况下，基于索引优化MIN/MAX操作，或者对于MyISAM存储引擎优化COUNT(*)操作，不必等到执行阶段再进行计算，查询执行计划生成的阶段即完成优化。</td></tr><tr><td>distinct</td><td>优化distinct操作，在找到第一匹配的元组后即停止找同样值的动作</td></tr></tbody></table><h2 id="慢查询分析"><a href="#慢查询分析" class="headerlink" title="慢查询分析"></a>慢查询分析</h2><h3 id="查询日志设置"><a href="#查询日志设置" class="headerlink" title="查询日志设置"></a>查询日志设置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#x27;general_log&#x27;; #查询是否开启查询日志</span><br><span class="line">set global general_log = on; # 开启查询日志</span><br><span class="line">show variables like &#x27;log_output&#x27;; # 查看日志写入类型</span><br><span class="line">set global log_output = &#x27;table&#x27;; #修改日志写入类型</span><br><span class="line">select *</span><br><span class="line">from mysql.slow_log</span><br><span class="line">limit 100; # 慢查询日志记录表</span><br></pre></td></tr></table></figure><p>mysql.slow_log 表字段意义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">query_time：       SQL语句的查询时间(在 MySQL 中所有类型的 SQL 语句执行的时间都叫做 query_time,而在 Oracle 中则仅指 select)</span><br><span class="line">lock_time:         锁的时间</span><br><span class="line">rows_sent:         返回了多少行,如果做了聚合就不准确了</span><br><span class="line">rows_examined:     #执行这条 SQL 处理了多少行数据</span><br><span class="line">db:                使用了哪个数据库</span><br><span class="line">sql_text：         执行的sql语句</span><br></pre></td></tr></table></figure><h2 id="存疑的点"><a href="#存疑的点" class="headerlink" title="存疑的点"></a>存疑的点</h2><ul><li>什么情况下需要开启查询缓存？</li></ul><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;explain-使用&quot;&gt;&lt;a href=&quot;#explain-使用&quot; class=&quot;headerlink&quot; title=&quot;explain 使用&quot;&gt;&lt;/a&gt;explain 使用&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;列名&lt;/th&gt;
&lt;th&gt;说明&lt;/</summary>
      
    
    
    
    <category term="技术开发" scheme="http://shjlone.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="服务端" scheme="http://shjlone.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    
    
    <category term="服务端" scheme="http://shjlone.github.io/tags/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令</title>
    <link href="http://shjlone.github.io/wiki/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/%E6%9C%8D%E5%8A%A1%E7%AB%AF/2021-01-08-Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://shjlone.github.io/wiki/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/%E6%9C%8D%E5%8A%A1%E7%AB%AF/2021-01-08-Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2021-05-29T05:42:40.148Z</published>
    <updated>2021-05-29T05:50:26.542Z</updated>
    
    <content type="html"><![CDATA[<h2 id="grep常用命令"><a href="#grep常用命令" class="headerlink" title="grep常用命令"></a>grep常用命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 查找进程中所有跟nginx匹配的</span><br><span class="line">ps -ef | grep nginx</span><br><span class="line"></span><br><span class="line"># 查看进程数</span><br><span class="line">ps -ef | grep nginx -c </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 搜索某个文件夹下，哪些文件包含关键字</span><br><span class="line">grep -r &quot;关键字&quot; 文件夹</span><br><span class="line"></span><br><span class="line"># 根据字符串搜索</span><br><span class="line">grep “被查找的字符串” 文件名 </span><br><span class="line"></span><br><span class="line"># 根据正则搜索</span><br><span class="line">grep –e “正则表达式” 文件名</span><br><span class="line"></span><br><span class="line"># 搜索不区分大小写</span><br><span class="line">grep –i “被查找的字符串” 文件名</span><br><span class="line"></span><br><span class="line"># 显示搜索出来的信息所在的行数</span><br><span class="line">grep -c “被查找的字符串” 文件名</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="find常用命令"><a href="#find常用命令" class="headerlink" title="find常用命令"></a>find常用命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 查看当前目录下所有php文件</span><br><span class="line">find . &quot;*.php&quot;</span><br><span class="line">find . -name &quot;*.php&quot;</span><br><span class="line"></span><br><span class="line"># 查找当前目录下，最近120分钟修改过的文件</span><br><span class="line">find . -mmin -120</span><br><span class="line"></span><br><span class="line"># 查看当前目录下，是否有名字叫“通讯录”的文件夹，-type：表示设定类型，d表示文件夹类型，可以替换为f(普通文件)、l(链接文件)</span><br><span class="line">find . -type d -name 通讯录</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;grep常用命令&quot;&gt;&lt;a href=&quot;#grep常用命令&quot; class=&quot;headerlink&quot; title=&quot;grep常用命令&quot;&gt;&lt;/a&gt;grep常用命令&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t</summary>
      
    
    
    
    <category term="技术开发" scheme="http://shjlone.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="服务端" scheme="http://shjlone.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    
    
    <category term="服务端" scheme="http://shjlone.github.io/tags/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    
  </entry>
  
</feed>
